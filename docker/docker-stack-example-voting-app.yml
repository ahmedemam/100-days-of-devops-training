# docker stack to manage and deploy 
version: "3"
services: 
  # redis service 
  redis: 
    image: redis:alpine 
    posts: "6379"
    networks: "front_end"
    deploy: 
      replicas: 2
      update_config: 
        parallelism: 2
        delay: 10s
      restart_policy: 
        condition: on-failure
  # database: postgresql service 
  db: 
    image: postgres:latest
    volumes: 
      - ddb-data:/var/lib/postgresql/data 
    networks: 
      - back_end 
    deploy: 
      placement: 
        constraints: [node.role == manager]
  
  # vote app: service 
  vote:
    image: dockersamples/examplevoteingapp_vote:before   
    ports: 
      - 5000:80
    networks: 
      - front_end
    depends_on:
      - redis
    deploy:
      replicas: 2
      update_config:
        parallelism: 2
      restart_policy: 
        condition: on-failure 
  # result app: service 
  result: 
    image: dockersamples/examplevoteingapp_result:before 
    ports:
      - 5001:50
    networks: 
      -back_end
    depends_on: 
      - db 
    deploy: 
      replicas: 1
      update_config: 
        parallelism: 2
        delay: 10s 
      restart_policy: 
        condition: on-failure
  # worker app: service 
  worker: 
    image: dockersamplese/examplevoteingapp_worker
    networks: 
      - front_end
      - back_end
    deploy: 
      mode: replicated 
      replicas: 1
      labels: [APP=VOTING] 
      restart_policy: 
        condition: on-failure
        max_attempts: 3
        window : 120s 
      placement: 
        constraints: [node.role == manager]

        
